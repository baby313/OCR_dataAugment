#coding:utf-8
import os
import sys
import json
import codecs
import cv2
import os.path
import shutil
import numpy as np
from ctypes import *
import glob


so_path = "/home/dp/OCR/Detection/code/LFocr.so"
LF_ocr = CDLL(so_path)
              #/home/dp/OCR/Detection/locate
locate_path = "/home/dp/OCR/Detection/locate/title.jpg"
template_path = "/home/dp/OCR/Detection/template/DriveLicense_0.json"
#img_path = "/data/linkface/OcrData/OcrPrpData/3984337_0.jpg"
img_dir = "/data/linkface/OcrData/OcrPrpData/"
json_dir = "/data/linkface/OcrData/标注结果/20170301_linkface_VehicleLicense_第三步_拉框_liangding/Label/"

'''
def getTextRectangle(LF_ocr):
    LF_ocr.textCrop.restype = py_object
    res = LF_ocr.textCrop( locate_path, template_path, img_path ) 
    np.array(res).reshape( (len(res)/4, 4) )
    print res
'''
def getTextRectangle(img_path):
    LF_ocr.textCrop.restype = py_object
    res = LF_ocr.textCrop( locate_path, template_path, img_path ) 
    return np.array(res).reshape( (len(res)/4, 4) )

def rectBy4(t, l, b, r):
    cv2.Rect rc
    rc.x = l
    rc.y = t
    rc.width = r - l
    rc.hight = b - t
    return rc

def rectByList(l):
    cv2.Rect rc
    rc.x = l[1]
    rc.y = l[0]
    rc.width = l[3] - l[1]
    rc.hight = l[0] - l[2]
    return rc

def overlapRate( t1,  l1,  b1,  r1,  t2,  l2,  b2,  r2):
	 iner = (max(0, min(r1, r2) - max(l1, l2))) * (max(0, min(b1, b2) - max(t1, t2)))
	 outer = (max(r1, r2) - min(l1, l2)) * (max(b1, b2) - min(t1, t2))
	return iner / outer


def testPosition():
    #parent是父文件夹;dirnames是dirroot所含文件夹;
    '''
    json_list_tem = []
    num=0
    in_path = json_dir + "*.json"
    for img_file in glob.glob(in_path):
        num+=1
        json_list_tem.append(img_file)
    print(num)
    #print("%d-%d\n", len(json_list_tem),num)
    '''
    json_list = []
    for parent,dirnames,filenames in os.walk(json_dir):
        for filename in filenames:
            if os.path.splitext(filename)[1] == '.json':
                jsonfile = json_dir + filename
                json_list.append(jsonfile)
    print("josn file count : ", len(json_list))
    img_list = []
    for parent,dirnames,filenames in os.walk(img_dir):
        for filename in filenames:
            if os.path.splitext(filename)[1] == '.jpg':
                imgfile = img_dir + filename
                img_list.append(imgfile)
    print("img file count : ", len(img_list))

    for i, j in zip(range(0, 4000), range(0, len(img_list))):
        dRate=[]
        imgRect = getTextRectangle(img_list[i])
        print("No : ", i)
        print("Image : ", img_list[j])
        print(imgRect)

        rc_list=[]
        for rcCount in range(len(imgTextRc)):
            rc_list.append(rectByList(imgTextRc[rcCount]))
        print(rc_list)
        '''
        jsRect=[]
        for js_path in json_list:
            jsfile = codecs.open(js_path,'r','utf-8')
            jsStr = json.load(jsfile)
            if jsStr['image']['rawFilename'] == os.path.basename(img_list[j]):
                jsfile.close()

                
            maxRate = 0.0
            maxPos
            for rcjs, rcimg in zip( range(len(jsStr['image']["objects"]["ocr"]["polygonList"])) , ):
                temp = overlapRate(jsStr["objects"]["ocr"][rcCount]["top"], jsStr["objects"]["ocr"][rcCount]["left"], jsStr["objects"]["ocr"][rcCount]["bottom"], jsStr["objects"]["ocr"][rcCount]["right"], )
                jsRect.append(jsStr["objects"]["ocr"][rcCount]["top"])
                jsRect.append(jsStr["objects"]["ocr"][rcCount]["left"])
                jsRect.append(jsStr["objects"]["ocr"][rcCount]["bottom"])
                jsRect.append(jsStr["objects"]["ocr"][rcCount]["right"])
        '''
            
'''
    LF_ocr.test.restype = py_object
    res = LF_ocr.test(locate_path, template_path, json_dir, img_dir)
    np.array(res).reshape((len(res)/10, 10))
    print res
'''

if __name__ == '__main__':
    #getTextRectangle()
    testPosition()
